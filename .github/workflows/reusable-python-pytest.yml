name: Pytest on any OS

on:
  workflow_call:
    inputs:
      package-manager:
        description: 'Package manager to use (eg. "conda", "poetry")'
        required: true
        type: string
        default: 'poetry'
      python-versions:
        description: 'Matrix of Python versions to test against (eg. ["3.10", "3.11", "3.12"])'
        required: false
        type: string
        default: "['3.10']"
      os:
        description: 'Matrix of OS to test against (eg. ["ubuntu-latest", "macos-latest"])'
        required: false
        type: string
        default: "['ubuntu-latest']"
      cache-number:
        description: 'Cache number to reset cache if poetry.lock has not changed'
        required: false
        type: number
        default: 1
      codecov-reference-python-version:
        description: 'Python version to use as reference for Codecov'
        required: false
        type: string
      codecov-reference-os:
        description: 'Matrix of OS to use as reference for Codecov'
        required: false
        type: string
        default: "['windows-latest']"
      install-extras:
        description: 'Extra dependencies to install (eg. ["torch", "cuda"])'
        required: false
        type: string
      virtual-repo-names:
        description: 'Matrix of virtual repository names to publish on (eg. ["public-dev-pypi"])'
        required: false
        type: string
      lfs:
        description: 'Boolean to indicate if Github LFS is needed'
        required: false
        type: boolean
        default: false
      timeout-minutes:
        description: 'Timeout in minutes for the job'
        required: false
        type: number
        default: 20

    secrets:
      CODECOV_TOKEN:
        description: 'Codecov token'
        required: false
      JFROG_ARTIFACTORY_TOKEN:
        description: 'JFrog Artifactory Token'
        required: false

jobs:
  pytest:
    name: Pytest
    if: ${{ (github.event_name != 'pull_request') || (github.event.pull_request.draft == false) }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
        os: ${{ fromJson(inputs.os)}}
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        shell: 'bash -l {0}'

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: ${{ inputs.lfs }}
          fetch-depth: 0

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_conda@GEOPY-2029
        name: Setup conda env
        if: ${{ inputs.package-manager == 'conda' }}
        with:
          python-version: ${{ matrix.python-version }}

      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_poetry@main
        name: Setup poetry env
        if: ${{ inputs.package-manager == 'poetry' }}
        with:
          cache-number: ${{ inputs.cache-number }}
          runner-os: ${{ runner.os }}
          install-extras: ${{ inputs.install-extras }}
          virtual-repo-names: ${{ inputs.virtual-repo-names }}
          JFROG_ARTIFACTORY_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}

      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_hatch@main
        name: Setup hatch env
        if: ${{ inputs.package-manager == 'hatch' }}
        with:
          cache-number: ${{ inputs.cache-number }}
          runner-os: ${{ runner.os }}

      - name: Run Pytest
        env:
          CMD_PREFIX: ${{ inputs.package-manager != 'conda' && inputs.package-manager || '' }}
        run: |
          ${{ env.CMD_PREFIX }} pytest --cov --cov-report=xml

      - name: Codecov
        if:  ${{ (inputs.codecov-reference-python-version) && (matrix.python-version == inputs.codecov-reference-python-version) && contains(inputs.codecov-reference-os, matrix.os) }}
        uses: codecov/codecov-action@v4
        with:
          name: GitHub
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
