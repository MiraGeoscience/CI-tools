name: Pytest on Windows

on:
  workflow_call:
    inputs:
      package_manager:
        description: 'Package manager to use (eg. "conda", "poetry")'
        required: true
        type: string
        default: 'poetry'
      python_ver:
        description: 'Matrix of Python versions to test against (eg. ["3.10", "3.11", "3.12"])'	
        required: false
        type: string
        default: "['3.10']"
      cache_number:
        description: 'Cache number to reset cache if poetry.lock has not changed'
        required: false
        type: number
        default: 1
      codecov_reference_python_ver:
        description: 'Python version to use as reference for Codecov'
        required: false
        type: string
      extra_repository:
        description: 'Boolean to indicate if extra repository is needed'
        required: false
        type: boolean
        default: false
      lfs:
        description: 'Boolean to indicate if Github LFS is needed'
        required: false
        type: boolean
        default: false

    secrets:
      CODECOV_TOKEN:
        description: 'Codecov token'
        required: false
      EXTRA_PYPI_REPO_USER:
        description: 'Extra PyPI repository username. Only used if `extra_repository` is True.'
        required: false
      EXTRA_PYPI_REPO_TOKEN:
        description: 'Extra PyPI repository token. Only used if `extra_repository` is True.'
        required: false

jobs:
  pytest:
    name: pytest (Windows)
    if: ${{ (github.event_name != 'pull_request') || (github.event.pull_request.draft == false) }}
    strategy:
      fail-fast: false
      matrix:
        python_ver: ${{ fromJSON(inputs.python_ver) }}
    defaults:
      run:
        shell: 'bash -l {0}'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: ${{ inputs.lfs }}
          fetch-depth: 0
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_ver }}
      
      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_conda@main
        name: Setup conda env
        if: ${{ inputs.package_manager == 'conda' }}
        with:
          python_ver: ${{ matrix.python_ver }}
      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_poetry@main
        name: Setup poetry env
        if: ${{ inputs.package_manager == 'poetry' }}
        with:
          python_ver: ${{ matrix.python_ver }}
          cache_number: ${{ inputs.cache_number }}
          runner_os: ${{ runner.os }}
          extra_repository: ${{ inputs.extra_repository }}
          repo_user: ${{ secrets.EXTRA_PYPI_REPO_USER }}
          repo_token: ${{ secrets.EXTRA_PYPI_REPO_TOKEN }}
      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_hatch@DEVOPS-439
        name: Setup hatch env
        if: ${{ inputs.package_manager == 'hatch' }}
        with:
          cache_number: ${{ inputs.cache_number }}
          runner_os: ${{ runner.os }}
      
      - name: Run Pytest
        run: |
          if ${{ inputs.package_manager == 'conda' }}; then
            pytest --cov --cov-report=xml
          elif ${{ inputs.package_manager == 'poetry' }}; then
            poetry run pytest --cov --cov-report=xml
          else
            hatch run pytest --cov --cov-report=xml
          fi
      - name: Codecov
        if:  ${{ (inputs.codecov_reference_python_ver) && (matrix.python_ver == inputs.codecov_reference_python_ver) }}
        uses: codecov/codecov-action@v4
        with:
          name: GitHub
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
