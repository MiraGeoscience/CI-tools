name: Publish condan package to Artifactory 

on:
  workflow_call:
    inputs:
        package-managers:
            description: 'Matrix of Package manager to use (eg. ["conda", "poetry", "hatch"])'
            required: true
            type: string
            default: '["poetry"]'
        package-name:
            description: 'Name of the package to build'
            required: true
            type: string
        python-version:
            description: 'Python version to use (eg: 3.10)'
            required: true
            type: string
        version-tag:
            description: 'Version tag of the package to build'
            required: false
            type: string
            default: 'v0.0.0'
        lfs:
            description: 'Boolean to indicate if Github LFS is needed'
            required: false
            type: boolean
            default: false
        
        extra-repository:
            description: 'Boolean to indicate if an extra repository is needed to manage the dependencies'
            required: false
            type: boolean
            default: false
        
        repo-names:
            description: 'List with all the names of repositories to publish on (eg. ["analyst-dev-pypi-local", "analyst-pypi-local"])'
            required: true
            type: string
        timeout-minutes:
            description: 'Timeout in minutes for the job'
            required: false
            type: number
            default: 20

    secrets:
        EXTRA_PYPI_REPO_USER:
            description: 'Extra PyPI repository username for dependencies. Only used if `extra-repository` is True.'
            required: false
        EXTRA_PYPI_REPO_TOKEN:
            description: 'Extra PyPI repository token. Only used if `extra-repository` is True.'
            required: false
        JFROG_ARTIFACTORY_URL:
            description: 'JFrog Artifactory URL'
            required: true
        JFROG_ARTIFACTORY_TOKEN:
            description: 'JFrog Artifactory Token'
            required: true

defaults:
    run:
        shell: 'bash -l {0}'

jobs:
    build_package:
        name: Build package
        strategy:
            fail-fast: false
            matrix:
                package-manager: ${{ fromJSON(inputs.package-managers) }}
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: 'bash -l {0}'
        timeout-minutes: ${{ inputs.timeout-minutes }}
        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    lfs: ${{ inputs.lfs }}
                    fetch-depth: 0
            -   name: Get version
                run: |
                    if [ "${{ inputs.version-tag }}" = "v0.0.0" ]; then
                        echo "Version tag not available"
                        exit 1
                    else
                        echo "Version tag available"
                        version=$(echo "$version_tag" | sed 's/^v//')
                        echo "VERSION=$version" >> $GITHUB_ENV
                    fi
                    
            
            -   uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-build_conda@DEVOPS-504
                name: Build conda package
                id: build-conda-package
                if: ${{ matrix.package-manager == 'conda' }}
                with:
                    python-version: ${{ inputs.python-version }}
            -   uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-build_poetry@DEVOPS-504
                name: Build poetry package
                id: build-poetry-package
                if: ${{ matrix.package-manager == 'poetry' }}
                with:
                    python-version: ${{ inputs.python-version }}
                    extra-repository: ${{ inputs.extra-repository }}
                    repo-user: ${{ secrets.EXTRA_PYPI_REPO_USER }}
                    repo-token: ${{ secrets.EXTRA_PYPI_REPO_TOKEN }}
            -   name: Define build path
                id: define-build-path
                run: |
                    if [[ ${{ matrix.package-manager }} == "conda" ]]; then
                        echo "DIR_PATH=${{ steps.build-conda-package.outputs.DIR_PATH}}"
                    else
                        echo "DIR_PATH=${{ steps.build-poetry-package.outputs.DIR_PATH}}"
                    fi
                    echo "dir-path=${DIR_PATH}" >> $GITHUB_OUTPUT
            -   uses: jfrog/setup-jfrog-cli@v4.4.1
                name: Setup JFrog CLI
                env:
                    JF_URL: ${{ secrets.JFROG_ARTIFACTORY_URL }}
                    JF_ACCESS_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}
            -   name: Publish package to Artifactory
                run: |
                    repository_list=$(echo '${{ inputs.repo-names }}' | jq -r '.[]')
                    repo_type=$( [[ ${{ matrix.package-manager }} == "conda" ]] && echo "conda" || echo "pypi" )
                    for repo_name in ${repository_list}; do
                        if [[ ${repo_name} == *${repo_type}* ]]; then
                            for file in ${{ steps.define-build-path.outputs.dir-path }}/*; do
                                filename=$(basename "${file}") 
                                echo "Uploading in: ${repo_name}/${{ inputs.package-name }}/${{ inputs.version-tag }}: $filename"
                                jf rt u $file ${repo_name}/${{ inputs.package-name }}/${{ inputs.version-tag }}/${filename}
                            done
                        fi
                    done
