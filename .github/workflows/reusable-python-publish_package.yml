name: Publish condan package to Artifactory 

on:
  workflow_call:
    inputs:
        package-managers:
            description: 'Matrix of Package manager to use (eg. ["conda", "poetry", "hatch"])'
            required: true
            type: string
            default: '["poetry"]'
        package-name:
            description: 'Name of the package to build'
            required: true
            type: string
        python-version:
            description: 'Python version to use (eg: 3.10)'
            required: true
            type: string
        version-tag:
            description: 'Version tag of the package to build'
            required: false
            type: string
            default: 'v0.0.0'
        lfs:
            description: 'Boolean to indicate if Github LFS is needed'
            required: false
            type: boolean
            default: false
        
        extra-repository:
            description: 'Boolean to indicate if an extra repository is needed to manage the dependencies'
            required: false
            type: boolean
            default: false
        
        repo-names:
            description: 'List with all the names of repositories to publish on (eg. ["analyst-dev-pypi-local", "analyst-pypi-local"])'
            required: true
            type: string
        timeout-minutes:
            description: 'Timeout in minutes for the job'
            required: false
            type: number
            default: 20

    secrets:
        EXTRA_PYPI_REPO_USER:
            description: 'Extra PyPI repository username for dependencies. Only used if `extra-repository` is True.'
            required: false
        EXTRA_PYPI_REPO_TOKEN:
            description: 'Extra PyPI repository token. Only used if `extra-repository` is True.'
            required: false
        JFROG_ARTIFACTORY_URL:
            description: 'JFrog Artifactory URL'
            required: true
        JFROG_ARTIFACTORY_TOKEN:
            description: 'JFrog Artifactory Token'
            required: true

defaults:
    run:
        shell: 'bash -l {0}'

jobs:
    build_package:
        name: Build package
        strategy:
            fail-fast: false
            matrix:
                package-manager: ${{ fromJSON(inputs.package-managers) }}
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: 'bash -l {0}'
        timeout-minutes: ${{ inputs.timeout-minutes }}
        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    lfs: ${{ inputs.lfs }}
                    fetch-depth: 0
            
            -   uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-build_conda@DEVOPS-504
                name: Build conda package
                if: ${{ matrix.package-manager == 'conda' }}
                with:
                    python-version: ${{ inputs.python-version }}
            -   uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-build_poetry@DEVOPS-504
                name: Build poetry package
                if: ${{ matrix.package-manager == 'poetry' }}
                with:
                    python-version: ${{ inputs.python-version }}
                    extra-repository: ${{ inputs.extra-repository }}
                    repo-user: ${{ secrets.EXTRA_PYPI_REPO_USER }}
                    repo-token: ${{ secrets.EXTRA_PYPI_REPO_TOKEN }}

            -   name: Check if there is some artifact
                run: |
                    ls .
                    ls dist
            
            -   uses: jfrog/setup-jfrog-cli@v4.4.1
                name: Setup JFrog CLI
                env:
                    JF_URL: ${{ secrets.JFROG_ARTIFACTORY_URL }}
                    JF_ACCESS_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}
            -   name: Publish package to Artifactory
                run: |
                    repository_list=$(echo '${{ inputs.repo-names }}' | jq -r '.[]')
                    echo "Repository list: ${repository_list}"
                    echo repository_list
                    for repo_name in ${repository_list}; do
                        echo "Uploading to repository: ${repo_name}"
                        if [[ ${repo_names} == *${{ matrix.package-manager }}* ]]; then

                            echo "Uploading in: ${repo_name}/${{ inputs.package-name }}/${{ inputs.version-tag }}/"
                            jf rt u dist/* ${repo_name}/${{ inputs.package-name }}/${{ inputs.version-tag }}/
                        fi
                    done

    # release_pypi_package:
    #     name: Release PyPI package
    #     runs-on: ubuntu-latest
    #     timeout-minutes: ${{ inputs.timeout-minutes }}
    #     if: ${{ inputs.package-manager != 'conda' }}
    #     steps:
    #         -   uses: actions/checkout@v4
    #             with:
    #                 lfs: ${{ inputs.lfs }}
    #                 fetch-depth: 0
    #         -   name: Set up Python version
    #             uses: actions/setup-python@v5
    #             with:
    #                 python-version: ${{ inputs.python-version }}
            
    #         -   uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_poetry@main
    #             name: Setup poetry env
    #             if: ${{ inputs.package-manager == 'poetry' }}
    #             with:
    #                 cache-number: 1
    #                 runner-os: ${{ runner.os }}
    #                 extra-repository: ${{ inputs.extra-repository }}
    #                 repo-user: ${{ secrets.EXTRA_PYPI_REPO_USER }}
    #                 repo-token: ${{ secrets.EXTRA_PYPI_REPO_TOKEN }}
    #         -   uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_hatch@main
    #             name: Setup hatch env
    #             if: ${{ inputs.package-manager == 'hatch' }}
    #             with:
    #                 cache-number: 1
    #                 runner-os: ${{ runner.os }}
            
    #         -   name: Build package
    #             run: |
    #                 if ${{ inputs.package-manager == 'poetry' }}; then
    #                     poetry build
    #                 elif ${{ inputs.package-manager == 'hatch'}}; then
    #                     hatch build
    #                 else
    #                     echo "Unknown pypi package manager. ${{ inputs.package-manager }} is not part of ['hatch', 'poetry']."
    #                     exit 1
    #                 fi
    #         -   name: Setup JFrog CLI
    #             uses: jfrog/setup-jfrog-cli@v4.4.1
    #             env:
    #                 JF_URL: ${{ secrets.JFROG_ARTIFACTORY_URL }}
    #                 JF_ACCESS_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}
    #         -   name: Publish package to Artifactory
    #             run: |
    #                 repository_list=$(echo '${{ inputs.repo-names }}' | jq -r '.[]')
    #                 for repo_name in ${repository_list}; do
    #                     jf rt u ${{ env.BUILD_PATH }} ${repo_name}/${{ inputs.package-name }}/${{ inputs.version-tag }}/${{ env.BUILD_NAME }}
    #                 done
                    
                    
    # release_conda_package:
    #     name: Release Conda package
    #     runs-on: ubuntu-latest
    #     timeout-minutes: ${{ inputs.timeout-minutes }}
    #     if: ${{ inputs.package-manager == 'conda' }}
    #     steps:
    #         -   name: Checkout
    #             uses: actions/checkout@v2
    #             with:
    #                 lfs: ${{ inputs.lfs }}
    #         -   name: Check if the version tag is available
    #             run: |
    #                 if [ "${{ inputs.version-tag }}" = "v0.0.0" ]; then
    #                     echo "Version tag not available"
    #                     exit 1
    #                 else
    #                     echo "Version tag available"
    #                 fi
    #         # -   name: Check if there is a conda recipe
    #         #     run: |
    #         #         ls .
    #         #         if [ -f meta.yaml ]; then
    #         #             echo "Conda recipe found"
    #         #         else
    #         #             echo "Conda recipe not found"
    #         #             exit 1
    #         #         fi
    #         -   name: Setup conda env
    #             uses: mamba-org/setup-micromamba@v1
    #             with:
    #                 micromamba-version: 1.5.8-0
    #                 environment-name: test_env
    #                 init-shell: bash
    #                 cache-downloads: true
    #             env:
    #                 PYTHONUTF8: 1
    #                 CONDA_CHANNEL_PRIORITY: strict
    #                 PIP_NO_DEPS: 1 # all dependencies are installed from conda
    #         -   name: Install conda build
    #             run: conda install -y conda-build conda-verify
    #         -   name: Build package
    #             id: build_package
    #             run: |
    #                 conda build .
    #                 build_path=$(conda build --output .)
    #                 build_name=$(basename ${build_path})
    #                 echo "BUILD_PATH=${build_path}" >> $GITHUB_ENV
    #                 echo "BUILD_NAME=${build_name}" >> $GITHUB_ENV
            
    #         -   name: Setup JFrog CLI
    #             uses: jfrog/setup-jfrog-cli@v4.4.1
    #             env:
    #                 JF_URL: ${{ secrets.JFROG_ARTIFACTORY_URL }}
    #                 JF_ACCESS_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}
    #         -   name: Publish package to Artifactory
    #             run: |
    #                 repository_list=$(echo '${{ inputs.repo-names }}' | jq -r '.[]')
    #                 for repo_name in ${repository_list}; do
    #                     jf rt u ${{ env.BUILD_PATH }} ${repo_name}/${{ inputs.package-name }}/${{ inputs.version-tag }}/${{ env.BUILD_NAME }}
    #                 done
