name: Publish pypi package to Artifactory 

on:
  workflow_call:
    inputs:
        package-manager:
            description: 'Name of the package manager (eg. "poetry")'
            required: true
            type: string
            default: 'poetry'
        package-name:
            description: 'Name of the package to build'
            required: true
            type: string
        python-version:
            description: 'Python version to use (eg: 3.10)'
            required: true
            type: string
        version-tag:
            description: 'Version tag of the package to build'
            required: false
            type: string
            default: 'v0.0.0'
        lfs:
            description: 'Boolean to indicate if Github LFS is needed'
            required: false
            type: boolean
            default: false
        
        extra-repository:
            description: 'Boolean to indicate if an extra repository is needed to manage the dependencies'
            required: false
            type: boolean
            default: false
        
        repo-name:
            description: 'Names of the virtual repositories to publish on (eg. "analyst-dev-pypi")'
            required: true
            type: string
        timeout-minutes:
            description: 'Timeout in minutes for the job'
            required: false
            type: number
            default: 20

    secrets:
        EXTRA_PYPI_REPO_USER:
            description: 'Extra PyPI repository username for dependencies. Only used if `extra-repository` is True.'
            required: false
        EXTRA_PYPI_REPO_TOKEN:
            description: 'Extra PyPI repository token. Only used if `extra-repository` is True.'
            required: false
        JFROG_ARTIFACTORY_URL:
            description: 'JFrog Artifactory URL'
            required: true
        JFROG_ARTIFACTORY_TOKEN:
            description: 'JFrog Artifactory Token'
            required: true

defaults:
    run:
        shell: 'bash -l {0}'

jobs:
    build_package:
        name: Build package
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: 'bash -l {0}'
        timeout-minutes: ${{ inputs.timeout-minutes }}
        if: ${{ inputs.package-manager }} == 'poetry'
        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    lfs: ${{ inputs.lfs }}
                    fetch-depth: 0
            -   name: Get version
                id: get-version
                run: |
                    if [ "${{ inputs.version-tag }}" = "v0.0.0" ]; then
                        echo "Version tag not available"
                        exit 1
                    fi
                    VERSION=$(echo "${{ inputs.version-tag }}" | sed 's/v//')
                    echo "version: ${VERSION}"
                    if [ -z "${VERSION}" ]; then
                        echo "Version is not available"
                        exit 1
                    fi
                    echo "version=${VERSION}" >> $GITHUB_OUTPUT
            -   uses: jfrog/setup-jfrog-cli@v4.4.1
                name: Setup JFrog CLI
                env:
                    JF_URL: https://${{ secrets.JFROG_ARTIFACTORY_URL }}
                    JF_ACCESS_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}
        
            -   name: Set up Python version
                uses: actions/setup-python@v5
                with:
                    python-version: ${{ inputs.python-version }}
            -   name: Install poetry
                run: |
                    curl -sSL https://install.python-poetry.org | POETRY_HOME=$HOME/.poetry python -
                    echo "$HOME/.poetry/bin" >> $GITHUB_PATH
            -   name: Configure poetry 
                run: |
                    poetry config virtualenvs.create true
                    poetry config virtualenvs.in-project true
                    jf poetry-config --repo-resolve=${{ inputs.repo-name }} 
            -   name: Poetry install env
                run: poetry install -vvv
            -   name: Poetry build
                run: poetry build

            -   name: Define build path
                id: define-build-path
                run: |
                    DIR_PATH="dist"
                    echo "dir-path: ${DIR_PATH}"
                    if [[ -z ${DIR_PATH} ]]; then
                        echo "No build path found"
                        exit 1
                    fi
                    echo "dir-path=${DIR_PATH}" >> $GITHUB_OUTPUT
            -   name: Publish package to Artifactory
                run: |
                    for file in ${{ steps.define-build-path.outputs.dir-path }}/*; do
                        filename=$(basename "${file}") 
                        echo "Uploading in: ${{ inputs.repo-name }}: $filename"
                        jf rt u dist/ ${{ inputs.repo-name }}/
                    done
