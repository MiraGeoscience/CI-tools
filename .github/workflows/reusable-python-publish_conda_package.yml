name: Publish conda package to Artifactory 

on:
  workflow_call:
    inputs:
        package-name:
            description: 'Name of the package to build'
            required: true
            type: string
        python-version:
            description: 'Python version to use (eg: 3.10)'
            required: true
            type: string
        lfs:
            description: 'Boolean to indicate if Github LFS is needed'
            required: false
            type: boolean
            default: false
        virtual-repo-names:
            description: 'Matrix of virtual repository names to publish on (eg. ["public-dev-conda"])'
            required: true
            type: string
        os:
            description: 'OS to build against (eg. "ubuntu-latest")'
            required: false
            type: string
            default: 'ubuntu-latest'
        timeout-minutes:
            description: 'Timeout in minutes for the job'
            required: false
            type: number
            default: 20

    secrets:
        JFROG_ARTIFACTORY_URL:
            description: 'JFrog Artifactory URL'
            required: true
        JFROG_ARTIFACTORY_TOKEN:
            description: 'JFrog Artifactory Token'
            required: true

defaults:
    run:
        shell: 'bash -l {0}'

jobs:
    build_conda_package:
        name: Build package
        runs-on: ${{ inputs.os }}
        timeout-minutes: ${{ inputs.timeout-minutes }}
        outputs:
            build-dir-path: ${{ steps.build-package.outputs.build-dir-path }}
        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    lfs: ${{ inputs.lfs }}
                    fetch-depth: 0
            -   name: Check if there is a conda recipe
                run: |
                    if [ -f meta.yaml ]; then
                        echo "Conda recipe found"
                    else
                        echo "Conda recipe not found"
                        exit 1
                    fi
            -   name: Set up Python version
                uses: actions/setup-python@v5
                with:
                    python-version: ${{ inputs.python-version }}
            -   uses: jfrog/setup-jfrog-cli@v4.4.1
                name: Setup JFrog CLI
                env:
                    JF_URL: https://${{ secrets.JFROG_ARTIFACTORY_URL }}
                    JF_ACCESS_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}
            
            -   name: Setup conda env
                uses: mamba-org/setup-micromamba@v1
                with:
                    micromamba-version: 1.5.8-0
                    environment-name: test_env
                    init-shell: bash
                    cache-downloads: true
                env:
                    PYTHONUTF8: 1
                    CONDA_CHANNEL_PRIORITY: strict
            -   name: Add conda channel
                run: |
                    repository_list=$(echo '${{ inputs.virtual-repo-names }}' | jq -r '.[]')
                    for repo_name in ${repository_list}; do
                        if [[ ${{ contains(inputs.os, 'windows') }} ]]; then
                            micromamba config append channels https://github:${{ secrets.JFROG_ARTIFACTORY_TOKEN }}@${{ secrets.JFROG_ARTIFACTORY_URL }}/artifactory/api/conda/${repo_name}
                        else
                            conda config --add channels https://github:${{ secrets.JFROG_ARTIFACTORY_TOKEN }}@${{ secrets.JFROG_ARTIFACTORY_URL }}/artifactory/api/conda/${repo_name}
                        fi
                    done
            -   name: Install conda build
                run: |
                    if [[ ${{ contains(inputs.os, 'windows') }} ]]; then
                        micromamba install -y conda-build conda-verify
                    else
                        conda install -y conda-build conda-verify
                    fi
            -   name: Build package
                id: build-package
                run: |
                    if [[ ${{ contains(inputs.os, 'windows') }} ]]; then
                        conda-build .
                    else
                        conda build .
                    fi
                    BUILD_PATH=$(conda build --output .)
                    if [[ -z ${BUILD_PATH} ]]; then
                        echo "No build path found"
                        exit 1
                    fi
                    if [[ ! -e ${BUILD_PATH} ]]; then
                        echo "No build at ${BUILD_PATH}"
                        exit 1
                    fi
                    echo "build-dir-path=$(dirname ${BUILD_PATH})" >> $GITHUB_OUTPUT
            
            -   name: Archive build artifact
                uses: actions/upload-artifact@v4
                with:
                    name: package-build-conda
                    path: ${{ steps.build-package.outputs.build-path }}
                    retention-days: 7
    publish_package_on_artifactory:
        name: Publish package on artifactory
        runs-on: 'ubuntu-latest'
        timeout-minutes: 5
        needs: build_conda_package
        strategy:
            matrix:
                virtual-repo-name: ${{ fromJson(inputs.virtual-repo-names) }}
        steps:
            -   name: Download build artifact
                uses: actions/download-artifact@v4
                with:
                    name: package-build-conda
            -   uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-publish_to_artifactory@DEVOPS-511
                with:
                    build-dir-path: ${{ needs.build_conda_package.outputs.build-dir-path }}
                    artifactory-dir-path: ${{ matrix.virtual-repo-name}}/noarch
                    JFROG_ARTIFACTORY_URL: https://${{ secrets.JFROG_ARTIFACTORY_URL }}
                    JFROG_ARTIFACTORY_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}
