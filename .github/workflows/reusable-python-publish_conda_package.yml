name: Publish Conda package to Artifactory

on:
  workflow_call:
    inputs:
        package-builder:
            description: 'Name of the package manager (eg. "conda", "rattler")'
            required: true
            type: string
            default: 'conda'
        package-name:
            description: 'Name of the package to build'
            required: true
            type: string
        python-version:
            description: 'Python version to use (eg: 3.10)'
            required: true
            type: string
        lfs:
            description: 'Boolean to indicate if Github LFS is needed'
            required: false
            type: boolean
            default: true
        virtual-repo-names:
            description: 'Matrix of virtual repository names to publish on (eg. ["public-conda-dev"])'
            required: true
            type: string
        os:
            description: 'OS to build against (eg. "ubuntu-latest")'
            required: false
            type: string
            default: 'ubuntu-latest'
        timeout-minutes:
            description: 'Timeout in minutes for the job'
            required: false
            type: number
            default: 20

    secrets:
        JFROG_ARTIFACTORY_URL:
            description: 'JFrog Artifactory URL'
            required: true
        JFROG_ARTIFACTORY_TOKEN:
            description: 'JFrog Artifactory Token'
            required: true

defaults:
    run:
        shell: 'bash -l {0}'

jobs:
    build_conda_package:
        name: Build package with conda
        if: ${{ github.repository_owner == 'MiraGeoscience' && inputs.package-builder == 'conda' }}
        runs-on: ${{ inputs.os }}
        timeout-minutes: ${{ inputs.timeout-minutes }}
        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    lfs: ${{ inputs.lfs }}
                    fetch-depth: 0
            -   name: Check if there is a conda recipe
                run: |
                    if [ -f meta.yaml ]; then
                        echo "Conda recipe found"
                    else
                        echo "Conda recipe not found"
                        exit 1
                    fi
            -   name: Set up Python version
                uses: actions/setup-python@v5
                with:
                    python-version: ${{ inputs.python-version }}
            -   uses: jfrog/setup-jfrog-cli@v4.4.1
                name: Setup JFrog CLI
                env:
                    JF_URL: https://${{ secrets.JFROG_ARTIFACTORY_URL }}
                    JF_ACCESS_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}

            -   name: Setup conda env
                uses: mamba-org/setup-micromamba@v1
                with:
                    micromamba-version: 1.5.8-0
                    environment-name: test_env
                    init-shell: bash
                    cache-downloads: true
                    post-cleanup: none
                env:
                    PYTHONUTF8: 1
                    CONDA_CHANNEL_PRIORITY: strict
            -   name: Add conda channel
                run: |
                    repository_list=$(echo '${{ inputs.virtual-repo-names }}' | jq -r '.[]')
                    for repo_name in ${repository_list}; do
                        if [[ ${{ contains(inputs.os, 'windows') }} ]]; then
                            micromamba config append channels https://github:${{ secrets.JFROG_ARTIFACTORY_TOKEN }}@${{ secrets.JFROG_ARTIFACTORY_URL }}/artifactory/api/conda/${repo_name}
                        else
                            conda config --add channels https://github:${{ secrets.JFROG_ARTIFACTORY_TOKEN }}@${{ secrets.JFROG_ARTIFACTORY_URL }}/artifactory/api/conda/${repo_name}
                        fi
                    done
            -   name: Install conda build
                run: |
                    if [[ ${{ contains(inputs.os, 'windows') }} ]]; then
                        micromamba install -y conda-build conda-verify
                    else
                        conda install -y conda-build conda-verify
                    fi
            -   name: Build package
                id: build-package
                run: |
                    if [[ ${{ contains(inputs.os, 'windows') }} ]]; then
                        conda-build .
                    else
                        conda build .
                    fi

                    if [[ ${{ contains(inputs.os, 'windows') }} ]]; then
                        BUILD_PATH=$(conda-build --output .)
                    else
                        BUILD_PATH=$(conda build --output .)
                    fi
                    
                    if [[ -z ${BUILD_PATH} ]]; then
                        echo "No build path found"
                        exit 1
                    fi
                    if [[ ! -e ${BUILD_PATH} ]]; then
                        echo "No build at ${BUILD_PATH}"
                        exit 1
                    fi
                    echo "build-path=${BUILD_PATH}" >> $GITHUB_OUTPUT

            -   name: Archive build artifact
                uses: actions/upload-artifact@v4
                with:
                    name: package-build-conda
                    path: ${{ steps.build-package.outputs.build-path }}
                    retention-days: 7
    build_rattler_package:
        name: Build package with rattler
        if: ${{ github.repository_owner == 'MiraGeoscience' && inputs.package-builder == 'rattler' }}
        runs-on: 'ubuntu-latest'
        timeout-minutes: ${{ inputs.timeout-minutes }}
        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    lfs: ${{ inputs.lfs }}
                    fetch-depth: 0
            -   name: Check if there is a rattler recipe
                run: |
                    if [ -f recipe.yaml ]; then
                        echo "Rattler recipe found"
                    else
                        echo "Rattler recipe not found"
                        exit 1
                    fi
            -   uses: jfrog/setup-jfrog-cli@v4.4.1
                name: Setup JFrog CLI
                env:
                    JF_URL: https://${{ secrets.JFROG_ARTIFACTORY_URL }}
                    JF_ACCESS_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}
            -   name: Authentificate with JFrog channels
                run: |
                    BUILDS_ARGS=""
                    RATTLER_AUTH_FILE=${{ runner.temp }}/credentials.json
                    
                    repository_list=$(echo '${{ inputs.virtual-repo-names }}' | jq -r '.[]')
                    repository_count=$(echo '${{ inputs.virtual-repo-names }}' | jq '. | length')
                    
                    # Check if there is more than one element
                    if [ "$repository_count" -ge 1 ]; then
                        echo '{"${{ secrets.JFROG_ARTIFACTORY_URL }}": {"BasicHTTP": {"username": "github", "password":"${{ secrets.JFROG_ARTIFACTORY_TOKEN }}"} } }' > "$RATTLER_AUTH_FILE"
                    else
                        BUILDS_ARGS=" --channel conda-forge"
                    fi

                    # Loop through the repository names and add them to the command
                    for repo_name in ${repository_list}; do
                        BUILDS_ARGS+=" --channel https://${{ secrets.JFROG_ARTIFACTORY_URL }}/artifactory/api/conda/${repo_name}"
                    done
                    
                    echo "RATTLER_AUTH_FILE=${RATTLER_AUTH_FILE}" >> "$GITHUB_ENV"
                    echo "BUILDS_ARGS=$BUILDS_ARGS" >> "$GITHUB_ENV"
            -   name: Build package
                uses: prefix-dev/rattler-build-action@v0.2.29
                with:
                    build-args: ${{ env.BUILDS_ARGS }}
                    recipe-path: ${{ github.workspace}}/recipe.yaml
                    artifact-name: package-build-conda
                
    publish_package_on_artifactory:
        name: Publish package
        if: |
            github.repository_owner == 'MiraGeoscience' && 
            always() && 
            (needs.build_conda_package.result == 'success' || needs.build_rattler_package.result == 'skipped') && 
            (needs.build_conda_package.result == 'skipped' || needs.build_rattler_package.result == 'success') && 
            !(needs.build_conda_package.result == 'skipped' && needs.build_rattler_package.result == 'skipped')
        runs-on: 'ubuntu-latest'
        timeout-minutes: 5
        needs: [build_conda_package, build_rattler_package]
        strategy:
            matrix:
                virtual-repo-name: ${{ fromJson(inputs.virtual-repo-names) }}
        steps:
            -   name: Download build artifact
                uses: actions/download-artifact@v4
                with:
                    name: package-build-conda
                    path: build-dir
            -   name: Publish package to Artifactory
                uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-publish_to_artifactory@main
                with:
                    build-dir-path: 'build-dir'
                    artifactory-dir-path: ${{ matrix.virtual-repo-name}}/noarch
                    JFROG_ARTIFACTORY_URL: ${{ secrets.JFROG_ARTIFACTORY_URL }}
                    JFROG_ARTIFACTORY_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}
    add_release_asset:
        name: Add release asset
        runs-on: 'ubuntu-latest'
        timeout-minutes: 5
        needs: publish_package_on_artifactory
        steps:
            -   name: Get draft release
                uses: MiraGeoscience/CI-tools/.github/actions/reusable-get_draft_release@main
                id: get-draft-release
                with:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            -   name: Download build artifact
                uses: actions/download-artifact@v4
                with:
                    name: package-build-conda
                    path: download-artifact
            -   name: Upload release asset
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    GH_REPO: ${{ github.repository }}
                run: gh release upload --clobber ${{ steps.get-draft-release.outputs.release-tag }} download-artifact/*
