name: Static analysis

on:
  workflow_call:
    inputs:
      package_manager:
        description: 'Package manager to use (eg. "conda", "poetry")'
        required: true
        type: string
        default: 'poetry'
      app_name:
        description: 'Name of the app to run static analysis on'
        required: true
        type: string
      python-version:
        description: 'Python version used with pylint'
        required: false
        type: string
        default: '3.10'
      extra_repository:
        description: 'Boolean to indicate if extra repository is needed'
        required: false
        type: boolean
        default: false
      timeout_minutes:
        description: 'Timeout in minutes for the job'
        required: false
        type: number
        default: 20
    secrets:
      EXTRA_PYPI_REPO_USER:
        description: 'Extra PyPI repository username. Only used if `extra_repository` is True.'
        required: false
      EXTRA_PYPI_REPO_TOKEN:
        description: 'Extra PyPI repository token. Only used if `extra_repository` is True.'
        required: false

env:
  source_dir: ${{ inputs.app_name }}

jobs:
  pylint:
    name: pylint
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: 'bash -l {0}'
    timeout-minutes: ${{ inputs.timeout_minutes }}
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false
          fetch-depth: 0
      - name: Set up Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{inputs.python-version}}
      
      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_conda@DEVOPS-466
        name: Setup conda env
        if: ${{ inputs.package_manager == 'conda' }}
        with:
          python-version: ${{ inputs.python-version }}
      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_poetry@DEVOPS-466
        name: Setup poetry env
        if: ${{ inputs.package_manager == 'poetry' }}
        with:
          cache_number: 1
          runner_os: ${{ runner.os }}
          extra_repository: ${{ inputs.extra_repository }}
          repo_user: ${{ secrets.EXTRA_PYPI_REPO_USER }}
          repo_token: ${{ secrets.EXTRA_PYPI_REPO_TOKEN }}
      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_hatch@main
        name: Setup hatch env
        if: ${{ inputs.package_manager == 'hatch' }}
        with:
          cache_number: 1
          runner_os: ${{ runner.os }}

      - name: Capture modified files
        if: github.event_name == 'pull_request'
        run: >-
          git fetch --deepen=500 origin ${{github.base_ref}}
          && echo "FILES_PARAM=$(
          git diff --diff-filter=AM --name-only refs/remotes/origin/${{github.base_ref}}... -- | grep -E "^(${source_dir}|tests)/.*\.py$" | xargs
          )" >> $GITHUB_ENV
      
      - name: Run Pylint on modified files
        if: ${{ (github.event_name == 'pull_request') && env.FILES_PARAM }}
        run: |
          if ${{ inputs.package_manager == 'conda' }}; then
            pylint $FILES_PARAM
          elif ${{ inputs.package_manager == 'poetry' }}; then
            poetry run pylint $FILES_PARAM
          else 
            hatch run pylint $FILES_PARAM
          fi
      
      - name: Run Pylint on all files
        run: |
          if ${{ inputs.package_manager == 'conda' }}; then
            pylint $source_dir tests
          elif ${{ inputs.package_manager == 'poetry' }}; then
            poetry run pylint $source_dir tests
          else
            hatch run pylint $source_dir tests
          fi
