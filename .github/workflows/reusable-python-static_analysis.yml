name: Static analysis

on:
  workflow_call:
    inputs:
      package-manager:
        description: 'Package manager to use (e.g. "conda", "poetry", "pixi")'
        required: true
        type: string
        default: 'poetry'
      app-name:
        description: 'Name of the app to run static analysis on'
        required: true
        type: string
      python-version:
        description: 'Python version used with pylint'
        required: false
        type: string
        default: '3.10'
      install-extras:
        description: 'Extra dependencies to install (e.g. ["torch", "cuda"])'
        required: false
        type: string
      virtual-repo-names:
        description: 'List of repository names to resolve on (e.g. ["public-dev-pypi"])'
        required: false
        type: string
      lfs:
        description: 'Boolean to indicate if Github LFS is needed'
        required: false
        type: boolean
        default: false
      timeout-minutes:
        description: 'Timeout in minutes for the job'
        required: false
        type: number
        default: 20
      os:
        description: 'List of OS to test against (e.g. ["ubuntu-latest", "macos-latest"])'
        required: false
        type: string
        default: "['ubuntu-latest']"
    secrets:
      JFROG_ARTIFACTORY_URL:
        description: 'JFrog Artifactory URL, needed if packages are on Artifactory'
        required: false
      JFROG_ARTIFACTORY_TOKEN:
        description: 'JFrog Artifactory Token, needed if packages are on Artifactory'
        required: false

env:
  source_dir: ${{ inputs.app-name }}

jobs:
  pylint:
    name: pylint
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    strategy:
      matrix:
        os: ${{ fromJson(inputs.os) }}
    runs-on: ${{ matrix. os}}
    defaults:
      run:
        shell: 'bash -l {0}'
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - uses: actions/checkout@v5
        with:
          lfs: ${{ inputs.lfs }}
          fetch-depth: 0
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{inputs.python-version}}

      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_conda@main
        name: Setup conda env
        if: ${{ inputs.package-manager == 'conda' }}
        with:
          python-version: ${{ inputs.python-version }}
          JFROG_ARTIFACTORY_URL: ${{ secrets.JFROG_ARTIFACTORY_URL }}
          JFROG_ARTIFACTORY_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}

      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_poetry@main
        name: Setup poetry env
        if: ${{ inputs.package-manager == 'poetry' }}
        with:
          cache-number: 1
          runner-os: ${{ runner.os }}
          install-extras: ${{ inputs.install-extras }}
          virtual-repo-names: ${{ inputs.virtual-repo-names }}
          JFROG_ARTIFACTORY_TOKEN: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}

      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_hatch@main
        name: Setup hatch env
        if: ${{ inputs.package-manager == 'hatch' }}
        with:
          cache-number: 1
          runner-os: ${{ runner.os }}
      - uses: MiraGeoscience/CI-tools/.github/actions/reusable-python-setup_pixi@DEVOPS-584
        name: Setup pixi env
        if: ${{ inputs.package-manager == 'pixi' }}
        with:
          python-version: ${{ inputs.python-version }}
          runner-os: ${{ runner.os }}

      - name: Capture modified files
        if: github.event_name == 'pull_request'
        run: >-
          git fetch --deepen=500 origin ${{github.base_ref}}
          && echo "FILES_PARAM=$(
          git diff --diff-filter=AM --name-only refs/remotes/origin/${{github.base_ref}}... -- | grep -E "^(${source_dir}|tests)/.*\.py$" | xargs
          )" >> $GITHUB_ENV

      - name: Run Pylint on modified files
        if: ${{ (github.event_name == 'pull_request') && env.FILES_PARAM }}
        run: |
          if ${{ inputs.package-manager == 'conda' }}; then
            pylint $FILES_PARAM
          elif ${{ inputs.package-manager == 'poetry' }}; then
            poetry run pylint $FILES_PARAM
          elif ${{ inputs.package-manager == 'pixi' }}; then
            pixi run pylint $FILES_PARAM
          else
            hatch run pylint $FILES_PARAM
          fi

      - name: Run Pylint on all files
        if: ${{ github.event_name == 'push' }}
        run: |
          if ${{ inputs.package-manager == 'conda' }}; then
            pylint $source_dir tests
          elif ${{ inputs.package-manager == 'poetry' }}; then
            poetry run pylint $source_dir tests
          elif ${{ inputs.package-manager == 'pixi' }}; then
            pixi run pylint $source_dir tests
          else
            hatch run pylint $source_dir tests
          fi
