name: Get or Draft Release
description: Find or create a new draft release for the current tag
inputs:
  GITHUB_TOKEN:
    description: "The GitHub token (secret)"
    required: true
    type: string
  existing-release:
    description: "The tag corresponding to the desired release. If empty, will get it from github.ref"
    required: false
    type: string

outputs:
  release-tag:
    description: "The tag for the newly created or existing release (same value as `inputs.existing-release` if provided)"
    value: ${{ steps.get-or-draft-release.outputs.release-tag || steps.get-existing-release.outputs.release-tag }}

runs:
  using: "composite"
  steps:
    - shell: bash
      run: gh --version
    - name: Get existing release
      id: get-existing-release
      if: ${{ inputs.existing-release }}
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        GH_REPO: ${{ github.repository }}
      shell: bash
      run: >
        gh release view ${{ inputs.release-tag }}
        && echo "release-tag=${{ inputs.existing-release }}" >> $GITHUB_OUTPUT
    - name: Get or Draft release
      id: get-or-draft-release
      if: ${{ !inputs.existing-release }}
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        GH_REPO: ${{ github.repository }}
      shell: bash
      run: >
        [[ "$GITHUB_REF" != refs/tags/v* ]]
        && { echo "Error: workflow is not running on a version tag" >&2; exit 1; }
        || tag_name=${GITHUB_REF#refs/tags/}

        # if no release is found, draft a new one (as pre-release if the tag says to)

        gh release view $tag_name 2> /dev/null
        || gh release create --draft
        $( echo $tag_name | grep -i -q '^v[0-9]\+\(\.[0-9]\+\)\+-[a-z]' && echo --prerelease )
        $tag_name

        echo "release-tag=$tag_name" >> $GITHUB_OUTPUT
