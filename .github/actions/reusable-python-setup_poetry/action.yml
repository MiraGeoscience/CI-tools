name: Setup poetry env
description: Setup poetry environment for Python
inputs:
  cache-number:
    description: 'Cache number to reset cache if poetry.lock has not changed'
    required: true
    type: number
  runner-os:
    description: 'Runner OS'
    required: true
    type: string
  virtual-repo-names:
    description: 'Matrix of virtual repository names to resolve (eg. ["public-dev-pypi"])'
    required: false
    type: string
  JFROG_ARTIFACTORY_TOKEN:
    description: 'JFrog Artifactory Token'
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo "version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")" >> $GITHUB_OUTPUT
    - name: Install poetry
      shell: bash
      run: |
        curl -sSL https://install.python-poetry.org | POETRY_HOME=$HOME/.poetry python -
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH
    - name: Config poetry
      shell: bash
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

        repository_list=$(echo '${{ inputs.virtual-repo-names }}' | jq -r '.[]')
        for repo_name in ${repository_list}; do
          first_part=$(echo "$repo_name" | cut -d'-' -f1 | tr '[:upper:]' '[:lower:]')
          echo "Adding repository $repo_name under $first_part"
          poetry config -- http-basic.${first_part} github ${{ inputs.JFROG_ARTIFACTORY_TOKEN }}
        done
    - name: Set up cache
      uses: actions/cache@v4
      id: cache
      with:
        path: .venv
        key: venv-${{ inputs.runner-os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}-{{ inputs.cache-number }}
    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: timeout 10s poetry run pip --version || rm -rf .venv
    - name: Install dependencies
      shell: bash
      run: poetry install -vvv
