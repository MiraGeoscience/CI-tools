name: Setup poetry env
description: Setup poetry environment for Python
inputs:
  cache-number:
    description: 'Cache number to reset cache if poetry.lock has not changed'
    required: true
    type: number
  runner-os:
    description: 'Runner OS'
    required: true
    type: string
  install-extras:
    description: 'Extra dependencies to install (eg. ["torch", "cuda"])'
    required: false
    type: string
  virtual-repo-names:
    description: 'Matrix of virtual repository names to resolve (eg. ["public-dev-pypi"])'
    required: false
    type: string
  JFROG_ARTIFACTORY_TOKEN:
    description: 'JFrog Artifactory Token'
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo "version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")" >> $GITHUB_OUTPUT
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.3
        plugins: poetry-dynamic-versioning
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true
    - name: Config repos for Poetry
      shell: bash
      env:
        INPUTS_VIRTUAL_REPO_NAMES: ${{ inputs.virtual-repo-names }}
        INPUTS_JFROG_ARTIFACTORY_TOKEN: ${{ inputs.JFROG_ARTIFACTORY_TOKEN }}
      run: |
        repository_list=$(echo "${INPUTS_VIRTUAL_REPO_NAMES}" | jq -r '.[]')
        for repo_name in ${repository_list}; do
          first_part=$(echo "$repo_name" | cut -d'-' -f1 | tr '[:upper:]' '[:lower:]')
          echo "Adding repository $repo_name under $first_part"
          poetry config -- http-basic.${first_part} github ${INPUTS_JFROG_ARTIFACTORY_TOKEN}
        done
    - name: Set up cache
      uses: actions/cache@v4
      id: cache
      with:
        path: .venv
        key: venv-${{ inputs.runner-os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}-{{ inputs.cache-number }}
    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: timeout 10s poetry run pip --version || rm -rf .venv
    - name: Install dependencies
      shell: bash
      env:
        INPUTS_INSTALL_EXTRAS: ${{ inputs.install-extras }}
      run: |
        extra_args=$(echo "${INPUTS_INSTALL_EXTRAS}" | jq -r 'map("-E " + .) | join(" ")')
        poetry install -vvv $(echo "$extra_args")
