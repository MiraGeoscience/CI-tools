# File: template-test-minimal-conda-env-install.yml
stages:
  - stage: TestInstallationOnMinimalCondaEnv
    displayName: Test installation on minimal conda environment
    jobs:
      - job: DiscoverFiles
        displayName: 'Discover environment files package'
        steps:
          - task: PowerShell@2
            name: DiscoverFiles
            inputs:
              targetType: 'inline'
              script: |
                $envFolder = "environments"
                $artifactFolder = "artifact_envFiles"
                $files = Get-ChildItem -Path $envFolder -Filter *.yml -Recurse
                if ($files.Count -eq 0) {
                  Write-Error "No environment files found in $envFolder"
                }
                $matrix = @{}
                if (!(Test-Path -Path $artifactFolder)) {
                    New-Item -ItemType Directory -Path $artifactFolder | Out-Null
                }

                $pipUrlMappings = @{
                    "geology"       = "geology"
                    "geophysics"    = "geophysics"
                    "all_deps_only" = "geology geophysics"
                    "all"           = "geology geophysics"
                    "interop"       = "public"
                    "simpeg"        = "geophysics"
                }

                foreach ($file in $files) {
                  if ($file.Name -match 'conda\.lock\.yml$') {
                    $key = [IO.Path]::GetFileNameWithoutExtension($file.Name)
                    $matrix[$key] = @{ envFile = $file.Name }
                    
                    $matchKey = $null
                    foreach ($pipKey in $pipUrlMappings.Keys) {
                        if ($($file.Name) -match $pipKey) {
                            $matchKey = $pipKey
                            break
                        }
                    }

                    if ($matchKey) {
                        $matrix[$key].repositories = $($pipUrlMappings[$matchKey])
                        $matrix[$key].pipKey = $matchKey
                    } else {
                        $matrix[$key].repositories = "[]"
                    }
                  }
                  Copy-Item -Path $file.FullName -Destination $artifactFolder -Force
                }
                
                $matrixJson = $matrix | ConvertTo-Json -Depth 2 -Compress
                echo "##vso[task.setvariable variable=matrix;isOutput=true]$matrixJson"
                Write-Host matrix $matrixJson
          - publish: 'artifact_envFiles/'
            artifact: envFiles
            displayName: 'Publish environment files'
      - job: TestInstallationOnMinimalCondaEnv
        pool:
          vmImage: 'windows-2022'
        # container: 
        #   image: mirageoscienceltd.jfrog.io/mira-docker-local/windows-servercore-ltsc2022-micromamba:latest
        #   endpoint: Docker-Artifactory
        dependsOn: DiscoverFiles
        strategy:
          matrix: $[ dependencies.DiscoverFiles.outputs['DiscoverFiles.matrix'] ]
        variables:
        - group: MIRA_PYTHON
        steps:
          - checkout: none
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $RELEASE_URL = "https://github.com/mamba-org/micromamba-releases/releases/download/1.5.10-0/micromamba-win-64"
                Write-Output "Downloading micromamba from $RELEASE_URL"
                curl.exe -L -o micromamba.exe $RELEASE_URL

                New-Item -ItemType Directory -Force -Path  $Env:LocalAppData\micromamba | out-null

                $MAMBA_INSTALL_PATH = Join-Path -Path $Env:LocalAppData -ChildPath micromamba\micromamba.exe

                Write-Output "`nInstalling micromamba to $Env:LocalAppData\micromamba`n"
                Move-Item -Force micromamba.exe $MAMBA_INSTALL_PATH | out-null

                # Add micromamba to PATH if the folder is not already in the PATH variable
                $PATH = [Environment]::GetEnvironmentVariable("Path", "User")
                if ($PATH -notlike "*$Env:LocalAppData\micromamba*") {
                    Write-Output "Adding $MAMBA_INSTALL_PATH to PATH`n"
                    [Environment]::SetEnvironmentVariable("Path", "$Env:LocalAppData\micromamba;" + [Environment]::GetEnvironmentVariable("Path", "User"), "User")
                } else {
                    Write-Output "$MAMBA_INSTALL_PATH is already in PATH`n"
                }

                # check if this is an interactive session
                if ($null -eq $Host.UI.RawUI) {
                    Write-Output "`nNot an interactive session, initializing micromamba to $Env:UserProfile\micromamba`n"
                    & $MAMBA_INSTALL_PATH shell init -s powershell -p $Env:UserProfile\micromamba
                }

                $prefix = "$Env:UserProfile\micromamba"

                Write-Output "Initializing micromamba in  $prefix"
                $MAMBA_INSTALL_PATH = Join-Path -Path $Env:LocalAppData -ChildPath micromamba\micromamba.exe
                Write-Output $MAMBA_INSTALL_PATH
                & $MAMBA_INSTALL_PATH shell init -s powershell -p $prefix
          - download: current
            artifact: envFiles
          - task: PowerShell@2
            name: ConfigurePypiSources
            inputs:
              targetType: 'inline'
              script: |
                echo "repositories: $(repositories) - envFile: $(envFile) - pipKey $(pipKey)"
                $string = "$(repositories)"
                $array = $string.Split(" ")
                $extra_index_url = ""
                foreach ($repo in $array) {
                  echo "Adding repository ${repo}-pypi-prod"
                  $extra_index_url += "https://$(JFROG_ARTIFACTORY_USER):$(JFROG_ARTIFACTORY_TOKEN)@$(JFROG_ARTIFACTORY_URL)/pypi/${repo}-pypi-prod/simple "
                }
                pip config set global.extra-index-url $extra_index_url
                echo "##vso[task.setvariable variable=extra_index_url;isOutput=true;issecret=true]$extra_index_url"
          - script: |
              pip config set global.extra-index-url $(extra_index_url)
              cd $(Pipeline.Workspace)/envFiles
              dir C:\Users\VssAdministrator\AppData\Local
              C:\Users\VssAdministrator\AppData\Local\micromamba\micromamba.exe env create -y -f $(envFile) -n $(pipKey)
