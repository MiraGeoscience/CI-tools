# File: template-test-minimal-conda-env-install.yml
parameters:
  - name: environment
    type: string
    default: prod
    values:
      - prod
      - dev
  - name: envToRepo
    type: object
    default:
      all:
        - geology 
        - geophysics
      all_deps_only: 
        - geology
        - geophysics
      geology: geology
      geophysics: geophysics
      interop: public
      simpeg: geophysics 

stages:
  - stage: TestInstallationOnMinimalCondaEnv
    displayName: Test installation on minimal conda environment
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: DiscoverFiles
        displayName: 'Discover environment files package'
        steps:
          - task: Bash@3
            name: DiscoverFiles
            inputs:
              targetType: 'inline'
              script: |
                envFolder="environments"
                artifactFolder="artifact_envFiles"

                # Create test directories and files
                mkdir -p "$envFolder" "$artifactFolder"

                # DiscoverFiles
                files=$(find $envFolder -name "py-3.10-win-64-*.yml")
                if [[ -z "$files" ]]; then
                    echo "No win-64 environment files found in $envFolder"
                    exit 1
                fi

                envToRepoJson='${{ convertToJson(parameters.envToRepo) }}'
                echo "EnvRepo $(echo $envToRepoJson | jq -c)"

                # Initialize the matrix JSON
                matrix="{}"

                # Iterate through each key-value pair in envToRepo
                while read -r entry; do
                  key=$(echo "$entry" | jq -r '.key')
                  value=$(echo "$entry" | jq -r '.value')
                  # Find the corresponding file
                  matchingFile=$(echo "$files" | grep -m 1 "$key")

                  if [ -z "$matchingFile" ]; then
                    echo "No matching file found for $key, skipping..."
                    continue
                  fi
                  filename=$(basename "$matchingFile" .yml)

                  # Check if value is an array or a string
                  if [[ "$value" == "["*"]" ]]; then
                    repos=$(echo "$value" | jq -r '. | join(" ")')
                  else
                    repos=$value
                  fi

                  echo "Found matching file for $key: $filename with repos: $repos"

                  # Create object
                  object_string=$( jq -n \
                                    --arg envType "$key" \
                                    --arg filename "$filename" \
                                    --arg repositories "$repos" \
                                    '{ ($envType): {name: $envType, filename: $filename, repositories: $repositories }}' )

                  # Merge with the main json_obj
                  matrix=$(echo "$matrix" | jq ". + $object_string")

                  echo "Found matching file for $key: $matchingFile"
                  echo "$matrix" | jq .

                  # Copy matching files to the artifact folder
                  cp "$matchingFile" "$artifactFolder/"
                done < <(echo "$envToRepoJson" | jq -c 'to_entries[]')

                echo $matrix | jq .
                json_matrix=$(echo "matrix" | jq -c)

                # Save and output the final matrix
                echo "##vso[task.setvariable variable=matrix;isOutput=true]$json_matrix"
          - publish: 'artifact_envFiles/'
            artifact: envFiles
            displayName: 'Publish environment files'
      - job: TestInstallation
        displayName: 'Test environment installation'
        pool:
          vmImage: 'windows-2022'
        container: 
          image: mirageoscienceltd.jfrog.io/mira-docker-local/windows-servercore-ltsc2022-micromamba:latest
          endpoint: Docker-Artifactory
        dependsOn: DiscoverFiles
        strategy:
          matrix: $[ dependencies.DiscoverFiles.outputs['DiscoverFiles.matrix'] ]
        variables:
        - group: MIRA_PYTHON
        steps:
          - checkout: none
          - download: current
            artifact: envFiles
          - task: PowerShell@2
            name: ConfigureSources
            displayName: 'Configure PyPi sources'
            inputs:
              targetType: 'inline'
              script: |
                $string = "$(repositories)"
                $array = $string.Split(" ")
                $extra_index_url = ""
                $isLast = ($array.Length - 1)
                foreach ($repo in $array) {
                  echo "Adding repository ${repo}-pypi-prod"
                  $extra_index_url += "https://$(JFROG_ARTIFACTORY_USER):$(JFROG_ARTIFACTORY_TOKEN)@$(JFROG_ARTIFACTORY_URL)/pypi/${repo}-pypi-${{ parameters.environment }}/simple"
                  if ($isLast -gt 0) {
                    $extra_index_url += " "
                    $isLast--
                  }
                }
                echo "##vso[task.setvariable variable=extra_index_url;issecret=true]$extra_index_url"
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $Env:PIP_EXTRA_INDEX_URL = "$(extra_index_url)"
                cd $(Pipeline.Workspace)/envFiles
                micromamba env create -y -f $(filename) -n $(name)
            name: InstallEnvironment
            displayName: 'Install environment'