# File: template-test-minimal-conda-env-install.yml
parameters:
  - name: environment
    type: string
    default: prod
    values:
      - prod
      - dev

stages:
  - stage: TestInstallationOnMinimalCondaEnv
    displayName: Test installation on minimal conda environment
    jobs:
      - job: DiscoverFiles
        displayName: 'Discover environment files package'
        steps:
          - task: PowerShell@2
            name: DiscoverFiles
            inputs:
              targetType: 'inline'
              script: |
                $envFolder = "environments"
                $artifactFolder = "artifact_envFiles"
                $files = Get-ChildItem -Path $envFolder -Filter py-3.10-win-64-*.yml -Recurse
                if ($files.Count -eq 0) {
                  Write-Error "No win-64 environment files found in $envFolder"
                }
                $matrix = @{}
                if (!(Test-Path -Path $artifactFolder)) {
                    New-Item -ItemType Directory -Path $artifactFolder | Out-Null
                }

                $pipUrlMappings = @{
                    "geology"       = "geology"
                    "geophysics"    = "geophysics"
                    "all_deps_only" = "geology geophysics"
                    "all"           = "geology geophysics"
                    "interop"       = "public"
                    "simpeg"        = "geophysics"
                }

                foreach ($file in $files) {
                  if ($file.Name -match 'conda\.lock\.yml$') {
                    $key = [IO.Path]::GetFileNameWithoutExtension($file.Name)
                    $matrix[$key] = @{ envFile = $file.Name }
                    
                    $matchKey = $null
                    foreach ($pipKey in $pipUrlMappings.Keys) {
                        if ($($file.Name) -match $pipKey) {
                            $matchKey = $pipKey
                            break
                        }
                    }

                    if ($matchKey) {
                        $matrix[$key].repositories = $($pipUrlMappings[$matchKey])
                        $matrix[$key].pipKey = $matchKey
                    } else {
                        $matrix[$key].repositories = "[]"
                    }
                  }
                  Copy-Item -Path $file.FullName -Destination $artifactFolder -Force
                }
                
                $matrixJson = $matrix | ConvertTo-Json -Depth 2 -Compress
                echo "##vso[task.setvariable variable=matrix;isOutput=true]$matrixJson"
          - publish: 'artifact_envFiles/'
            artifact: envFiles
            displayName: 'Publish environment files'
      - job: TestInstallation
        displayName: 'Test environment installation'
        pool:
          vmImage: 'windows-2022'
        container: 
          image: mirageoscienceltd.jfrog.io/mira-docker-local/windows-servercore-ltsc2022-micromamba:latest
          endpoint: Docker-Artifactory
        dependsOn: DiscoverFiles
        strategy:
          matrix: $[ dependencies.DiscoverFiles.outputs['DiscoverFiles.matrix'] ]
        variables:
        - group: MIRA_PYTHON
        steps:
          - checkout: none
          - download: current
            artifact: envFiles
          - task: PowerShell@2
            name: ConfigureSources
            displayName: 'Configure PyPi sources'
            inputs:
              targetType: 'inline'
              script: |
                $string = "$(repositories)"
                $array = $string.Split(" ")
                $extra_index_url = ""
                $isLast = ($array.Length - 1)
                foreach ($repo in $array) {
                  echo "Adding repository ${repo}-pypi-prod"
                  $extra_index_url += "https://$(JFROG_ARTIFACTORY_USER):$(JFROG_ARTIFACTORY_TOKEN)@$(JFROG_ARTIFACTORY_URL)/pypi/${repo}-pypi-${{ parameters.environment }}/simple"
                  if ($isLast -gt 0) {
                    $extra_index_url += " "
                    $isLast--
                  }
                }
                echo "##vso[task.setvariable variable=extra_index_url;issecret=true]$extra_index_url"
          - script: |
              $Env:PIP_EXTRA_INDEX_URL = $(extra_index_url)
              cd $(Pipeline.Workspace)/envFiles
              micromamba env create -y -f $(envFile) -n $(pipKey)
            name: InstallEnvironment
            displayName: 'Install environment'