# File: template-test-minimal-conda-env-install.yml
parameters:
  # Determines the type of package repository to use for testing installation (prod or dev).
  - name: environment
    type: string
    default: prod
    values:
      - prod
      - dev
  # Maps environment names to the repositories required for each environment.
  - name: envToVirtualRepos
    type: object
    default:
      all: geoplus
      all_deps_only: ""
      geology: geology
      geophysics: geophysics
      interop: public
      simpeg: geophysics
  - name: envToRemoteRepos
    type: object
    default:
      all:
        - conda-forge
      all_deps_only:
        - conda-forge
      geology:
        - conda-forge
      geophysics:
        - conda-forge
      interop:
        - conda-forge
      simpeg:
        - conda-forge

stages:
  - stage: TestInstallationOnMinimalCondaEnv
    displayName: Test installation on minimal conda environment
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: DiscoverFiles
        displayName: Discover environment files package
        steps:
          - task: Bash@3
            name: DiscoverFiles
            displayName: Discover environment files and create strategy matrix
            inputs:
              targetType: 'inline'
              script: |
                buildEnvFolder="build"
                artifactFolder="artifact_envFiles"

                # Create test directories and files
                mkdir -p "environments" "$artifactFolder"

                # DiscoverFiles
                files=$(find $buildEnvFolder -name "py-3.10-win-64-*.yml")
                if [[ -z "$files" ]]; then
                    echo "No win-64 environment files found in $buildEnvFolder"
                    exit 1
                fi

                envToVirtualReposJson='${{ convertToJson(parameters.envToVirtualRepos) }}'
                envToRemoteReposJson='${{ convertToJson(parameters.envToRemoteRepos) }}'

                # Initialize the matrix JSON
                matrix="{}"

                # Iterate through each key-value pair in envToVirtualRepos
                while read -r entry; do
                  key=$(echo "$entry" | jq -r '.key')
                  value=$(echo "$entry" | jq -r '.value')
                  # Find the corresponding file
                  matchingFile=$(echo "$files" | grep -m 1 "$key\.conda\.lock")

                  if [ -z "$matchingFile" ]; then
                    echo "No matching file found for $key, skipping..."
                    continue
                  fi
                  filename=$(basename "$matchingFile")

                  # Check if value is an array or a string
                  if [[ "$value" == "["*"]" ]]; then
                    repos=$(echo "$value" | jq -r '. | join(" ")')
                  else
                    repos=$value
                  fi

                  # also add repos from envToRemoteRepos for the current key
                  remoteRepos=$(echo "$envToRemoteReposJson" | jq -r ".$key | join(\" \")")

                  # Create object
                  object_string=$( jq -n \
                                    --arg envType "$key" \
                                    --arg filename "$filename" \
                                    --arg repositories "$repos" \
                                    --arg remotes "$remoteRepos" \
                                    '{ ($envType): {name: $envType, filename: $filename, repositories: $repositories, remotes: $remotes }}' )

                  # Merge with the main json_obj
                  matrix=$(echo "$matrix" | jq ". + $object_string")

                  # Copy matching files to the artifact folder
                  cp "$matchingFile" "$artifactFolder/"
                done < <(echo "$envToVirtualReposJson" | jq -c 'to_entries[]')

                json_matrix=$(echo $matrix | jq -c .)

                # Save and output the final matrix
                echo "##vso[task.setvariable variable=matrix;isOutput=true]$json_matrix"
          - publish: 'artifact_envFiles/'
            artifact: envFiles
            displayName: Publish environment files
      - job: TestInstallation
        displayName: Test environment installation
        pool:
          vmImage: 'windows-2022'
        container:
          image: mirageoscienceltd.jfrog.io/mira-docker-local/windows-servercore-ltsc2022-micromamba:latest
          endpoint: Docker-Artifactory
        dependsOn: DiscoverFiles
        strategy:
          matrix: $[ dependencies.DiscoverFiles.outputs['DiscoverFiles.matrix'] ]
        variables:
        - group: MIRA_PYTHON
        steps:
          - checkout: none
          - download: current
            artifact: envFiles
          - task: PowerShell@2
            name: ConfigureCondaSources
            displayName: Configure Conda sources
            inputs:
              targetType: 'inline'
              script: |
                $conda_channels = ""
                if ($repositories) {
                  $virtual_repos = "$(repositories)".Split(" ")
                  foreach ($repo in $virtual_repos) {
                    $repo_name = "${repo}-noremote-conda-${{ parameters.environment }}"
                    echo "Adding Conda channel for '${repo_name}'"
                    $url = "https://$(JFROG_ARTIFACTORY_USER):$(JFROG_ARTIFACTORY_TOKEN)@$(JFROG_ARTIFACTORY_URL)/conda/${repo_name}"
                    if ($conda_channels) {
                      $conda_channels += ","
                    }
                    $conda_channels += $url
                  }
                }

                $remote_repos = "$(remotes)".Split(" ") -join ","
                echo "Adding Conda channels: '${remote_repos}'"
                if ($conda_channels -and $remote_repos) {
                  $conda_channels += ","
                }
                $conda_channels += "${remote_repos}"
                echo "##vso[task.setvariable variable=conda_channels;issecret=true]$conda_channels"
          - task: PowerShell@2
            name: ConfigurePyPISources
            displayName: Configure PyPI sources
            inputs:
              targetType: 'inline'
              script: |
                $string = "$(repositories)"
                $array = $string.Split(" ")
                $pip_index_url = ""
                $pip_extra_index_url = ""
                foreach ($repo in $array) {
                  $repo_name = "${repo}-pypi-${{ parameters.environment }}"
                  echo "Adding Pip index URL for '${repo_name}'"
                  $url = "https://$(JFROG_ARTIFACTORY_USER):$(JFROG_ARTIFACTORY_TOKEN)@$(JFROG_ARTIFACTORY_URL)/pypi/${repo_name}/simple"
                  if ($pip_index_url) {
                    $pip_extra_index_url += " $url"
                  }
                  else {
                    $pip_index_url = $url
                  }
                }
                $pip_extra_index_url = $pip_extra_index_url.Trim()

                # if no repos were listed, this is the case all-deps-only: it only has pip dependency from PyTorch
                if (-not $pip_index_url ) {
                  $pip_index_url = "https://download.pytorch.org/whl/cpu"
                }
                echo "##vso[task.setvariable variable=pip_index_url;issecret=true]$pip_index_url"
                echo "##vso[task.setvariable variable=pip_extra_index_url;issecret=true]$pip_extra_index_url"
          - task: PowerShell@2
            name: InstallEnvironment
            displayName: Install environment
            inputs:
              targetType: 'inline'
              script: |
                $Env:CONDA_CHANNELS = "$(conda_channels)"
                $Env:MAMBA_CHANNEL_PRIORITY = "strict"
                $Env:PIP_INDEX_URL = "$(pip_index_url)"
                $Env:PIP_EXTRA_INDEX_URL = "$(pip_extra_index_url)"
                $Env:PIP_NO_DEPS = 1
                cd $(Pipeline.Workspace)/envFiles
                micromamba --no-rc env create -y -f $(filename) -n $(name)
          - task: PowerShell@2
            name: CheckEnvironment
            displayName: Check environment
            inputs:
              targetType: 'inline'
              script: |
                micromamba --no-rc run -n $(name) python -c "import geoh5py; print(f'geoh5py version: {geoh5py.__version__}')"
                micromamba --no-rc run -n $(name) python -c "import numpy; print(f'numpy version: {numpy.__version__}')"
