# File: template-test-minimal-conda-env-install.yml
parameters:
  # Determines the type of package repository to use for testing installation (prod or dev).
  - name: environment
    type: string
    default: prod
    values:
      - prod
      - dev
  # Maps environment names to the repositories required for each environment.
  - name: envToRepo
    type: object
    default:
      all:
        - geology
        - geophysics
        - public
      all_deps_only:
        - public
      geology:
        - geology
        - public
      geophysics:
        - geophysics
        - public
      interop: public
      simpeg:
        - geophysics
        - public

stages:
  - stage: TestInstallationOnMinimalCondaEnv
    displayName: Test installation on minimal conda environment
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: DiscoverFiles
        displayName: Discover environment files package
        steps:
          - task: Bash@3
            name: DiscoverFiles
            displayName: Discover environment files and create strategy matrix
            inputs:
              targetType: 'inline'
              script: |
                buildEnvFolder="build"
                artifactFolder="artifact_envFiles"

                # Create test directories and files
                mkdir -p "environments" "$artifactFolder"

                # DiscoverFiles
                files=$(find $buildEnvFolder -name "py-3.10-win-64-*.yml")
                if [[ -z "$files" ]]; then
                    echo "No win-64 environment files found in $buildEnvFolder"
                    exit 1
                fi

                envToRepoJson='${{ convertToJson(parameters.envToRepo) }}'

                # Initialize the matrix JSON
                matrix="{}"

                # Iterate through each key-value pair in envToRepo
                while read -r entry; do
                  key=$(echo "$entry" | jq -r '.key')
                  value=$(echo "$entry" | jq -r '.value')
                  # Find the corresponding file
                  matchingFile=$(echo "$files" | grep -m 1 "$key\.conda\.lock")

                  if [ -z "$matchingFile" ]; then
                    echo "No matching file found for $key, skipping..."
                    continue
                  fi
                  filename=$(basename "$matchingFile")

                  # Check if value is an array or a string
                  if [[ "$value" == "["*"]" ]]; then
                    repos=$(echo "$value" | jq -r '. | join(" ")')
                  else
                    repos=$value
                  fi

                  # Create object
                  object_string=$( jq -n \
                                    --arg envType "$key" \
                                    --arg filename "$filename" \
                                    --arg repositories "$repos" \
                                    '{ ($envType): {name: $envType, filename: $filename, repositories: $repositories }}' )

                  # Merge with the main json_obj
                  matrix=$(echo "$matrix" | jq ". + $object_string")

                  # Copy matching files to the artifact folder
                  cp "$matchingFile" "$artifactFolder/"
                done < <(echo "$envToRepoJson" | jq -c 'to_entries[]')

                json_matrix=$(echo $matrix | jq -c .)

                # Save and output the final matrix
                echo "##vso[task.setvariable variable=matrix;isOutput=true]$json_matrix"
          - publish: 'artifact_envFiles/'
            artifact: envFiles
            displayName: Publish environment files
      - job: TestInstallation
        displayName: Test environment installation
        pool:
          vmImage: 'windows-2022'
        container:
          image: mirageoscienceltd.jfrog.io/mira-docker-local/windows-servercore-ltsc2022-micromamba:latest
          endpoint: Docker-Artifactory
        dependsOn: DiscoverFiles
        strategy:
          matrix: $[ dependencies.DiscoverFiles.outputs['DiscoverFiles.matrix'] ]
        variables:
        - group: MIRA_PYTHON
        steps:
          - checkout: none
          - download: current
            artifact: envFiles
          - task: PowerShell@2
            name: ConfigureCondaSources
            displayName: Configure Conda sources
            inputs:
              targetType: 'inline'
              script: |
                $string = "$(repositories)"
                $array = $string.Split(" ")
                $conda_channels = ""
                foreach ($repo in $array) {
                  $repo_name = "${repo}-conda-${{ parameters.environment }}-local"
                  echo "Adding Conda channel for '${repo_name}'"
                  $url = "https://$(JFROG_ARTIFACTORY_USER):$(JFROG_ARTIFACTORY_TOKEN)@$(JFROG_ARTIFACTORY_URL)/conda/${repo_name}"
                  micromamba config append channels $url
                  if ($conda_channels -ne "") {
                    $conda_channels += ","
                  }
                  $conda_channels += $url
                }
                $pytorch_channel_name = "pytorch"
                echo "Adding Conda channel for '${pytorch_channel_name}'"
                $conda_channels += ",${pytorch_channel_name}"
                $conda_forge_channel_name = "conda-forge"
                echo "Adding Conda channel for '${conda_forge_channel_name}'"
                $conda_channels += ",${conda_forge_channel_name}"
                echo "##vso[task.setvariable variable=conda_channels;issecret=true]$conda_channels"
          - task: PowerShell@2
            name: ConfigurePyPISources
            displayName: Configure PyPI sources
            inputs:
              targetType: 'inline'
              script: |
                $string = "$(repositories)"
                $array = $string.Split(" ")
                $pip_index_url = ""
                $pip_extra_index_url = ""
                foreach ($repo in $array) {
                  $repo_name = "${repo}-pypi-${{ parameters.environment }}-local"
                  echo "Adding Pip index URL for '${repo_name}'"
                  $url = "https://$(JFROG_ARTIFACTORY_USER):$(JFROG_ARTIFACTORY_TOKEN)@$(JFROG_ARTIFACTORY_URL)/pypi/${repo_name}/simple"
                  if ($pip_index_url -eq "") {
                    $pip_index_url = $url
                  }
                  else {
                    $pip_extra_index_url += " $url"
                  }
                }
                $pypi_repo_name = "pypi-${{ parameters.environment }}-remote"
                echo "Adding Pip index URL for '${pypi_repo_name}'"
                $pip_extra_index_url += " https://$(JFROG_ARTIFACTORY_USER):$(JFROG_ARTIFACTORY_TOKEN)@$(JFROG_ARTIFACTORY_URL)/pypi/${repo_name}/simple"
                $pip_extra_index_url = $pip_extra_index_url.Trim()
                echo "##vso[task.setvariable variable=pip_index_url;issecret=true]$pip_index_url"
                echo "##vso[task.setvariable variable=pip_extra_index_url;issecret=true]$pip_extra_index_url"
          - task: PowerShell@2
            name: InstallEnvironment
            displayName: Install environment
            inputs:
              targetType: 'inline'
              script: |
                $Env:CONDA_CHANNELS = "$(conda_channels)"
                $Env:CONDARC = "$(Pipeline.Workspace)/envFiles"
                $Env:PIP_INDEX_URL = "$(pip_index_url)"
                $Env:PIP_EXTRA_INDEX_URL = "$(pip_extra_index_url)"
                $Env:PIP_NO_DEPS = 1
                cd $(Pipeline.Workspace)/envFiles
                micromamba env create -y -f $(filename) -n $(name)
